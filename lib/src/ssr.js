import fs from 'fs'
import path from 'path'
import getPort from 'get-port'
import { fileURLToPath } from 'url'
import express from 'express'
import { createServer as createViteServer } from 'vite'
import {glob} from "glob"
import puppeteer from 'puppeteer'
import {info, error, warning} from "./chalkTheme.js"


const __dirname = path.dirname(fileURLToPath(import.meta.url))

const RENDERER_PATH = '__renderer__.js'
const PATTERN = '**/*.vshot.vue'
const SCREENSHOTS_PATH = process.cwd() + '/vshots'

function getRenderer(componentPath) {
    const componentName = path.basename(componentPath).split('.')[0]

    return `// this file is autogenerated by v-shot
import ${componentName} from './${componentPath.replaceAll('\\', '/')}'
import { createApp } from 'vue'

function render(component) {
    const app = createApp(component)
    if (component.onAppCreated) {
        component.onAppCreated(app)
    }

    app.mount('#app')
}
try {
    if (import.meta.hot) {
      import.meta.hot.on('vshot:before-screenshot', async () => {
        if (${componentName}.beforeScreenshot) {
            await ${componentName}.beforeScreenshot(document.getElementById('app'))
            import.meta.hot.send('vshot:ready')
        } else {
            import.meta.hot.send('vshot:ready')
        }
      })
    }
} catch(e) {
    import.meta.hot.send('vshot:error', { error: e })
}

render(${componentName})`
}


async function getScreenshot(componentName, port, vite) {
    puppeteer.configuration.logLevel = 'error'

    const browser = await puppeteer.launch()
    const page = await browser.newPage()
    await page.setViewport({ width: 1280, height: 720 });
    await page.goto(`http://localhost:${port}`)

    vite.ws.send('vshot:before-screenshot')

    let _r = null
    let readyState = await new Promise((resolve) => {
        vite.ws.on('vshot:ready', resolve)
        _r = resolve
    })

    vite.ws.off('vshot:ready', _r)

    await page.screenshot({path: `${SCREENSHOTS_PATH}/${componentName}.png`, fullPage: true})
    await browser.close()

    console.log(info('done', componentName))
}

export async function createServer() {
    if (!fs.existsSync(SCREENSHOTS_PATH)){
        fs.mkdirSync(SCREENSHOTS_PATH)
    }

    const relativeFilePaths = await glob(PATTERN, {
        ignore: "**/node_modules/**",
        cwd: process.cwd(),
    })

    if (relativeFilePaths.length === 0) {
        console.log(
            warning(`No files found matching pattern: "${PATTERN}"`)
        )
    }

    let id = 0

    const app = express()

    const vite = await createViteServer({
        server: { middlewareMode: true },
        appType: 'custom',
    })

    vite.ws.on('vshot:error', (data, client) => {
        console.log(error(data.error))
    })

    app.use(vite.middlewares)

    app.use('*', async (req, res, next) => {
        const url = req.originalUrl

        try {
            const rendererSrc = getRenderer(relativeFilePaths[id])
            fs.writeFileSync(RENDERER_PATH, rendererSrc)


            // template = fs.readFileSync(
            //     path.resolve(process.cwd(), 'index.html'),
            //     'utf-8',
            // )

            let template = `
            <!doctype html>
            <html lang="en">
              <head>
                <meta charset="UTF-8" />
                <link rel="icon" type="image/svg+xml" href="/vite.svg" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                <title>Vite + Vue</title>
              </head>
              <body>
                <div id="app"></div>
                <script type="module" src="/__renderer__.js"></script>
              </body>
            </html>
            `

            template = await vite.transformIndexHtml(url, template)

            res.status(200).set({ 'Content-Type': 'text/html' }).end(template)
        } catch (e) {
            vite.ssrFixStacktrace(e)
            next(e)
        }
    })


    // vite.ws.on('v-shot:from-client', (data) => {
    //     console.log('v-shot event', data)
    //     app.re
    // })

    const port = await getPort({port: 57333})

    const server = app.listen({port})

    while (id < relativeFilePaths.length) {
        console.log(info(`taking screenshot of ${path.basename(relativeFilePaths[id].split('.')[0])}`))
        await getScreenshot(path.basename(relativeFilePaths[id].split('.')[0]), port, vite)

        id += 1
    }

    fs.unlinkSync(RENDERER_PATH)
    server.close()
}
